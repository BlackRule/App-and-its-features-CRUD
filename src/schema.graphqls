type RegisterLoginOutput {
  token: String!
  user: User!
}

type User {
  id: Int!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  active: Boolean!
}

type Feature{
  id: Int!
  name: String!
}

type App{
  id: Int!
  name: String!
  features: [Feature!]
}

input RegisterLogin {
  email: String!
  password: String!
}

input UpdateUser {
  firstName: String
  lastName: String
  email: String!
}

type Query {
  user(id: Int!): User!
  userProfile: User!
  apps: [App!]
#  features: [Feature!]
}

type Mutation {
  register(input: RegisterLogin!): RegisterLoginOutput!
  login(input: RegisterLogin!): RegisterLoginOutput!
  updateUser(input: UpdateUser!): User!
  forgotPassword(email: String!): Boolean!
  resetPassword(resetToken: String!, password: String!): RegisterLoginOutput!
  createApp(name: String!): App!
  updateApp(id: Int!, name: String!): App!
  deleteApp(id: Int!): Int!
#  createFeature(name: String!): Feature!
}